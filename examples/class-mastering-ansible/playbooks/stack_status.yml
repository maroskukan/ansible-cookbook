---
- hosts: loadbalancer
  become: yes
  gather_facts: no
  tasks:
    - name: verify nginx service
      ansible.builtin.command: service nginx status

    - name: verify nginx is listening on 80
      ansible.builtin.wait_for: port=80 timeout=1

- hosts: webserver
  become: yes
  gather_facts: no
  tasks:
    - name: verify apache2 service
      ansible.builtin.command: service apache2 status

    - name: verify apache2 is listening on 80
      ansible.builtin.wait_for: port=80 timeout=1

- hosts: database
  become: yes
  tasks:
    - name: verify mysql service
      ansible.builtin.command: service mysql status

    - name: verify mysql is listening on 3306
      ansible.builtin.wait_for: host={{ ansible_eth0.ipv4.address }} port=3306 timeout=1


# When control node name resolution is not set, it is required to access by IP Address
- hosts: control
  gather_facts: no
  tasks:
    - name: verify end-to-end response
      ansible.builtin.uri: url=http://{{ hostvars[item].ansible_ssh_host }} return_content=yes
      with_items: "{{ groups['loadbalancer'] }}"
      register: lb_index

    - ansible.builtin.fail: msg="index failed to return content"
      when: "'Hello, from sunny' not in item.content"
      with_items: "{{ lb_index.results }}"

    - name: verify end-to-end db response
      ansible.builtin.uri: url=http://{{ hostvars[item].ansible_ssh_host }}/db return_content=yes
      with_items: "{{ groups['loadbalancer'] }}"
      register: lb_db

    - ansible.builtin.fail: msg="index failed to return content"
      when: "'Database Connected from' not in item.content"
      with_items: "{{ lb_db.results }}"
    

- hosts: loadbalancer
  gather_facts: no
  tasks:
    - name: verify backend response
      ansible.builtin.uri: url=http://{{ item }} return_content=yes
      with_items: "{{ groups['webserver'] }}"
      register: app_index

    - ansible.builtin.fail: msg="index failed to return content"
      when: "item.item|string  not in item.content"
      with_items: "{{ app_index.results }}"

    - name: verify backend db response
      ansible.builtin.uri: url=http://{{ item }}/db return_content=yes
      with_items: "{{ groups['webserver'] }}"
      register: app_db

    - ansible.builtin.fail: msg="db failed to return content"
      when: "item.item|string  not in item.content"
      with_items: "{{ app_db.results }}"